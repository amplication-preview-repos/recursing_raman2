/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Folder } from "./Folder";
import { FolderCountArgs } from "./FolderCountArgs";
import { FolderFindManyArgs } from "./FolderFindManyArgs";
import { FolderFindUniqueArgs } from "./FolderFindUniqueArgs";
import { CreateFolderArgs } from "./CreateFolderArgs";
import { UpdateFolderArgs } from "./UpdateFolderArgs";
import { DeleteFolderArgs } from "./DeleteFolderArgs";
import { BacklogItemFindManyArgs } from "../../backlogItem/base/BacklogItemFindManyArgs";
import { BacklogItem } from "../../backlogItem/base/BacklogItem";
import { FolderService } from "../folder.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Folder)
export class FolderResolverBase {
  constructor(
    protected readonly service: FolderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Folder",
    action: "read",
    possession: "any",
  })
  async _foldersMeta(
    @graphql.Args() args: FolderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Folder])
  @nestAccessControl.UseRoles({
    resource: "Folder",
    action: "read",
    possession: "any",
  })
  async folders(@graphql.Args() args: FolderFindManyArgs): Promise<Folder[]> {
    return this.service.folders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Folder, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Folder",
    action: "read",
    possession: "own",
  })
  async folder(
    @graphql.Args() args: FolderFindUniqueArgs
  ): Promise<Folder | null> {
    const result = await this.service.folder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Folder)
  @nestAccessControl.UseRoles({
    resource: "Folder",
    action: "create",
    possession: "any",
  })
  async createFolder(@graphql.Args() args: CreateFolderArgs): Promise<Folder> {
    return await this.service.createFolder({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Folder)
  @nestAccessControl.UseRoles({
    resource: "Folder",
    action: "update",
    possession: "any",
  })
  async updateFolder(
    @graphql.Args() args: UpdateFolderArgs
  ): Promise<Folder | null> {
    try {
      return await this.service.updateFolder({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Folder)
  @nestAccessControl.UseRoles({
    resource: "Folder",
    action: "delete",
    possession: "any",
  })
  async deleteFolder(
    @graphql.Args() args: DeleteFolderArgs
  ): Promise<Folder | null> {
    try {
      return await this.service.deleteFolder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BacklogItem], { name: "backlogItems" })
  @nestAccessControl.UseRoles({
    resource: "BacklogItem",
    action: "read",
    possession: "any",
  })
  async findBacklogItems(
    @graphql.Parent() parent: Folder,
    @graphql.Args() args: BacklogItemFindManyArgs
  ): Promise<BacklogItem[]> {
    const results = await this.service.findBacklogItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
