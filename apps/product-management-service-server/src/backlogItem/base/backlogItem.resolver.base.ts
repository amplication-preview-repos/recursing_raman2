/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BacklogItem } from "./BacklogItem";
import { BacklogItemCountArgs } from "./BacklogItemCountArgs";
import { BacklogItemFindManyArgs } from "./BacklogItemFindManyArgs";
import { BacklogItemFindUniqueArgs } from "./BacklogItemFindUniqueArgs";
import { CreateBacklogItemArgs } from "./CreateBacklogItemArgs";
import { UpdateBacklogItemArgs } from "./UpdateBacklogItemArgs";
import { DeleteBacklogItemArgs } from "./DeleteBacklogItemArgs";
import { Folder } from "../../folder/base/Folder";
import { BacklogItemService } from "../backlogItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BacklogItem)
export class BacklogItemResolverBase {
  constructor(
    protected readonly service: BacklogItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BacklogItem",
    action: "read",
    possession: "any",
  })
  async _backlogItemsMeta(
    @graphql.Args() args: BacklogItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BacklogItem])
  @nestAccessControl.UseRoles({
    resource: "BacklogItem",
    action: "read",
    possession: "any",
  })
  async backlogItems(
    @graphql.Args() args: BacklogItemFindManyArgs
  ): Promise<BacklogItem[]> {
    return this.service.backlogItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BacklogItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BacklogItem",
    action: "read",
    possession: "own",
  })
  async backlogItem(
    @graphql.Args() args: BacklogItemFindUniqueArgs
  ): Promise<BacklogItem | null> {
    const result = await this.service.backlogItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BacklogItem)
  @nestAccessControl.UseRoles({
    resource: "BacklogItem",
    action: "create",
    possession: "any",
  })
  async createBacklogItem(
    @graphql.Args() args: CreateBacklogItemArgs
  ): Promise<BacklogItem> {
    return await this.service.createBacklogItem({
      ...args,
      data: {
        ...args.data,

        folder: args.data.folder
          ? {
              connect: args.data.folder,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BacklogItem)
  @nestAccessControl.UseRoles({
    resource: "BacklogItem",
    action: "update",
    possession: "any",
  })
  async updateBacklogItem(
    @graphql.Args() args: UpdateBacklogItemArgs
  ): Promise<BacklogItem | null> {
    try {
      return await this.service.updateBacklogItem({
        ...args,
        data: {
          ...args.data,

          folder: args.data.folder
            ? {
                connect: args.data.folder,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BacklogItem)
  @nestAccessControl.UseRoles({
    resource: "BacklogItem",
    action: "delete",
    possession: "any",
  })
  async deleteBacklogItem(
    @graphql.Args() args: DeleteBacklogItemArgs
  ): Promise<BacklogItem | null> {
    try {
      return await this.service.deleteBacklogItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Folder, {
    nullable: true,
    name: "folder",
  })
  @nestAccessControl.UseRoles({
    resource: "Folder",
    action: "read",
    possession: "any",
  })
  async getFolder(
    @graphql.Parent() parent: BacklogItem
  ): Promise<Folder | null> {
    const result = await this.service.getFolder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
